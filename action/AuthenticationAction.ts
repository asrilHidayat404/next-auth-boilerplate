"use server";
import bcrypt from "bcryptjs";
import path from "path";
import { promises as fs } from "fs";
import { signUpSchema } from "@/schemas/SignUpSchema";
import db from "@/lib/db";
import { createUserSchema } from "@/schemas/CreateUserSchema";
import { error } from "console";
import { revalidatePath } from "next/cache";
import { auth } from "@/lib/auth";

const signUp = async (formData: FormData) => {
  const fullName = formData.get("fullName");
  const email = formData.get("email");
  const password = formData.get("password");
  const passwordConfirmation = formData.get("passwordConfirmation");

  const validatedData = signUpSchema.safeParse({
    fullName,
    email,
    password,
    passwordConfirmation,
  });
  // üö® HAPUS return error dari sini
  // karena client sudah handle dengan react-hook-form

  if (!validatedData.success) {
    // Lempar error agar frontend bisa tangkap pesan asli
    throw new Error(
      validatedData.error.errors.map((e) => e.message).join(", ")
    );
  }

  const existingUser = await db.user.findUnique({
    where: {
      email: validatedData?.data.email,
    },
  });

  console.log(existingUser);

  if (existingUser) {
    return {
      success: false,
      error: "User with this email has alredy been registered",
    };
  }

  console.log({ validatedData }, "bottom");
  try {
    const user = await db.$transaction(async (tx) => {
      const createdUser = await tx.user.create({
        data: {
          full_name: validatedData.data.fullName,
          email: validatedData.data.email.toLowerCase(),
          password: await bcrypt.hash(validatedData.data.password, 10),
          role_id: 2,
          avatar: "avatar/defaultAvatar.png",
        },
      });

       await tx.activityLog.create({
        data: {
          userId: createdUser?.id, // siapa yang melakukan aksi
          event: "USER_AUTHENTICATION",
          type: "Register",
          effected: `User: ${createdUser?.email}`, // user yang baru dibuat
          details: {
            email: createdUser?.email,
            name: createdUser?.full_name,
            autoGenerated: true,
          },
          ipAddress: "system",
          userAgent: "system",
          timestamp: new Date(),
        },
      });

      // copy avatar
      const avatarPath = await copyDefaultAvatar(
        "public/storage/avatar",
        createdUser.id.toString()
      );

      // update path avatar
      const updatedUser = await tx.user.update({
        where: { id: createdUser.id },
        data: { avatar: avatarPath },
      });

      return updatedUser;
    });
    return { success: true, user };
  } catch (error) {
    return { success: false, error: "Gagal membuat user" };
  }
};

const roleMap: Record<string, number> = {
  admin: 1,
  user: 2,
};

const CreateUserAction = async (formData: FormData) => {
  const fullName = formData.get("fullName");
  const email = formData.get("email");
  const role = formData.get("role");
  const password = formData.get("password");
  const passwordConfirmation = formData.get("passwordConfirmation");

  const validatedData = createUserSchema.safeParse({
    fullName,
    email,
    role,
    password,
    passwordConfirmation,
  });
  // üö® HAPUS return error dari sini
  // karena client sudah handle dengan react-hook-form
  if (!validatedData.success) {
    // Lempar error agar frontend bisa tangkap pesan asli
    throw new Error(
      validatedData.error.errors.map((e) => e.message).join(", ")
    );
  }
  console.log({ validatedData });

  const existingUser = await db.user.findUnique({
    where: {
      email: validatedData?.data.email,
    },
  });

  if (existingUser) {
    return {
      success: false,
      error: "User with this email has alredy been registered",
    };
  }
  const authUser = await auth();

  try {
    const user = await db.$transaction(async (tx) => {
      console.log("üëâ Start create user");
      // mapping role string ke id
      const roleId = roleMap[validatedData.data.role];
      if (!roleId) throw new Error("Role tidak valid");

      console.log("Role get: ", roleId);
      const createdUser = await tx.user.create({
        data: {
          full_name: validatedData.data.fullName,
          email: validatedData.data.email.toLowerCase(),
          password: await bcrypt.hash(validatedData.data.password, 10),
          role_id: roleId,
          avatar: "avatar/defaultAvatar.png",
        },
      });
      await tx.activityLog.create({
        data: {
          userId: authUser?.userId, // siapa yang melakukan aksi
          event: "USER_MANAGEMENT",
          type: "Create",
          effected: `User: ${createdUser.email}`, // user yang baru dibuat
          details: {
            email: createdUser.email,
            name: createdUser.full_name,
            autoGenerated: true,
          },
          ipAddress: "system",
          userAgent: "system",
          timestamp: new Date(),
        },
      });
      console.log("User created ", createdUser);

      // copy avatar
      const avatarPath = await copyDefaultAvatar(
        "public/storage/avatar",
        createdUser.id.toString()
      );

      // update path avatar
      const updatedUser = await tx.user.update({
        where: { id: createdUser.id },
        data: { avatar: avatarPath },
      });

      revalidatePath("/dashboard/users");

      return updatedUser;
    });
    return { success: true, message: "User Created" };
  } catch (error) {
    return { success: false, error: "Gagal membuat user" };
  }
};

export async function copyDefaultAvatar(targetDir: string, userId: string) {
  const defaultPath = path.join(
    process.cwd(),
    "public/default/defaultAvatar.png"
  ); // sumber
  const targetPath = path.join(process.cwd(), targetDir, `${userId}.png`); // tujuan

  // pastikan folder ada
  await fs.mkdir(path.dirname(targetPath), { recursive: true });

  try {
    await fs.copyFile(defaultPath, targetPath);
  } catch (err) {
    console.error("Gagal copy avatar default:", err);
    throw new Error("Gagal membuat avatar default");
  }

  // return path yang bisa dipakai di frontend
  return "avatar/" + `${userId}.png`;
}

async function SearchUserAction(query: string) {
  if (!query.trim()) {
    return {
      success: false,
      error: "Query kosong",
    };
  }

  try {
    const user = await db.user.findMany({
      where: {
        OR: [
          { full_name: { contains: query } },
          { email: { contains: query } },
        ],
      },
      orderBy: {
        createdAt: "desc", // optional
      },
      include: {
        role: true,
      },
    });

    if (!user.length) {
      return { success: false, error: "User tidak ditemukan" };
    }

    return {
      success: true,
      user,
    };
  } catch (error) {
    console.error("‚ùå Search error:", error);
    return {
      success: false,
      error: "Terjadi kesalahan server",
    };
  }
}

export { signUp, CreateUserAction, SearchUserAction };
