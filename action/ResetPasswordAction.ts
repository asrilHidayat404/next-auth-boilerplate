"use server"

// app/api/auth/forgot-password/route.ts
import db from "@/lib/db";
import { v4 as uuid } from "uuid";
import { Resend } from "resend";
import { ResetPasswordEmail } from "@/components/ResetPassword";
import { resetPasswordSchema } from "@/schemas/ResetPasswordSchema";
import bcrypt from "bcryptjs";


const resend = new Resend(process.env.RESEND_API_KEY!);

export async function ForgotPassword(formData: FormData) {
  const email = formData.get("email") as string;

  const user = await db.user.findUnique({ where: {
    email: email
  } });
  if (!user) {
    // Jangan beri tahu user apakah email ada atau tidak
    return null
  }

  console.log("user forgot password:", user.full_name);
  
  const token = uuid();
  const expires = new Date(Date.now() + 60 * 60 * 1000); // 1 jam

  await db.userToken.create({
    data: {
      token,
      userId: user.id,
      type: "RESET_PASSWORD",
      expires,
    },
  });

  if(!user.full_name || !token) {
    throw new Error("something went wrong")
  }

  // Kirim email pakai Resend
  const response = await resend.emails.send({
    from: "onboarding@resend.dev", // domain harus diverifikasi
    to: 'asril.hidayat.2004@gmail.com',
    subject: "Reset Your Password",
    react: ResetPasswordEmail({ firstName: user.full_name, token }),
  });

  console.log("Resend response:", response);

  return { success: true };
}



export async function ResetPassword(formData: FormData) {
  try {
    const token = formData.get("token") as string;
    const password = formData.get("password") as string;
    const password_confirmation = formData.get("password_confirmation") as string;

    
    const validatedData = resetPasswordSchema.safeParse({ password, password_confirmation });
    
    if (!validatedData.success) {
      throw new Error(
        validatedData.error.errors.map((e) => e.message).join(", ")
      );
    }

    const userToken = await db.userToken.findFirst({
      where: {
        token,
        type: "RESET_PASSWORD",
        expires: { gt: new Date() },
      },
    });

    if (!userToken) {
      return null;
    }

    
    await db.$transaction(async (tx) => {
      const user = await tx.user.findUnique({ where: { id: userToken.userId } });
      if (!user) throw new Error("User not found");

      const hashedPassword = await bcrypt.hash(password, 10);
      await tx.user.update({
        where: { id: userToken.userId },
        data: { password: hashedPassword },
      });

      await tx.activityLog.create({
        data: {
          userId: user.id,
          event: "USER_AUTHENTICATION",
          type: "Reset Password",
          effected: `User: ${user.email}`,
          details: {
            old: { password: "*********" },
            new: { password: "*********" },
            autoGenerated: true,
          },
          ipAddress: "system",
          userAgent: "system",
          timestamp: new Date(),
        },
      });

      await tx.userToken.delete({ where: { id: userToken.id } });
    });

    console.log("reset password success");
    

    return { success: true };
  } catch (error: any) {
    console.error("Reset password error:", error);
    return null;
  }
}
