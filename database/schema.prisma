generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int    @id @default(autoincrement())
  role_name String @unique

  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String          @id @default(cuid())
  full_name      String?
  email          String?         @unique
  password       String?
  emailVerified  DateTime?
  avatar         String?
  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]
  userTokens    UserToken[]
  posts          Post[]
  role_id        Int

  role        Role        @relation(fields: [role_id], references: [id], onUpdate: Cascade)
  activityLog ActivityLog []

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tambahkan field baru ke model ActivityLog
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  
  // Field baru sesuai kebutuhan
  event     String   // Jenis event/aksi
  type      String   // Tipe aktivitas (Create, Update, Delete, etc.)
  effected  String   // Data/record yang terkena efek
  details   Json?    // Simpan perubahan detail dalam JSON
  
  // Metadata
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now()) // Ganti createdAt jadi timestamp
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timestamp])
  @@index([type])
  @@index([event])
}
model Post {
  id      String @id @default(cuid())
  title   String
  content String
  image   String

  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model UserToken {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "RESET_PASSWORD", "EMAIL_VERIFY", dsb
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([expires])
}

