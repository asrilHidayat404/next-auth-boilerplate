import db from "@/lib/db";
import { resetPasswordSchema } from "@/schemas/ResetPasswordSchema";
import bcrypt from "bcryptjs";
import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  try {
    const { token, password, password_confirmation } = await req.json();

    
    const validatedData = resetPasswordSchema.safeParse({ password, password_confirmation });
    
    if (!validatedData.success) {
      throw new Error(
        validatedData.error.errors.map((e) => e.message).join(", ")
      );
    }

    const userToken = await db.userToken.findFirst({
      where: {
        token,
        type: "RESET_PASSWORD",
        expires: { gt: new Date() },
      },
    });

    if (!userToken) {
      return NextResponse.json(
        { success: false, error: "Invalid or expired token" },
        { status: 400 }
      );
    }

    
    await db.$transaction(async (tx) => {
      const user = await tx.user.findUnique({ where: { id: userToken.userId } });
      if (!user) throw new Error("User not found");

      const hashedPassword = await bcrypt.hash(password, 10);
      await tx.user.update({
        where: { id: userToken.userId },
        data: { password: hashedPassword },
      });

      await tx.activityLog.create({
        data: {
          userId: user.id,
          event: "USER_AUTHENTICATION",
          type: "Reset Password",
          effected: `User: ${user.email}`,
          details: {
            old: { password: "*********" },
            new: { password: "*********" },
            autoGenerated: true,
          },
          ipAddress: "system",
          userAgent: "system",
          timestamp: new Date(),
        },
      });

      await tx.userToken.delete({ where: { id: userToken.id } });
    });

    return NextResponse.json({ success: true });
  } catch (error: any) {
    console.error("Reset password error:", error);
    return NextResponse.json(
      { success: false, error: error.message || "Internal Server Error" },
      { status: 500 }
    );
  }
}
